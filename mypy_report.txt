src/utils.py:2: error: Library stubs not installed for "yaml"  [import-untyped]
src/gui/widgets/document_view.py:1: error: Cannot find implementation or library stub for module named "PySide6.QtWidgets"  [import-not-found]
src/gui/widgets/control_panel.py:1: error: Cannot find implementation or library stub for module named "PySide6.QtWidgets"  [import-not-found]
src/gui/widgets/control_panel.py:10: error: Cannot find implementation or library stub for module named "PySide6.QtCore"  [import-not-found]
src/gui/widgets/analysis_view.py:1: error: Cannot find implementation or library stub for module named "PySide6.QtWebEngineWidgets"  [import-not-found]
src/gui/dialogs/library_selection_dialog.py:2: error: Cannot find implementation or library stub for module named "PySide6.QtCore"  [import-not-found]
src/gui/dialogs/library_selection_dialog.py:3: error: Cannot find implementation or library stub for module named "PySide6.QtWidgets"  [import-not-found]
src/gui/dialogs/add_rubric_source_dialog.py:1: error: Cannot find implementation or library stub for module named "PySide6.QtWidgets"  [import-not-found]
src/gui/workers/analysis_worker.py:2: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/analysis_worker.py:3: error: Cannot find implementation or library stub for module named "PySide6.QtCore"  [import-not-found]
src/core/build_bm25_index.py:3: error: Skipping analyzing "rank_bm25": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/core/report_generator.py:3: error: Library stubs not installed for "markdown"  [import-untyped]
src/core/report_generator.py:3: note: Hint: "python3 -m pip install types-Markdown"
src/core/report_generator.py:6: error: Cannot find implementation or library stub for module named "src.core.risk_scoring_service"  [import-not-found]
src/gui/workers/folder_analysis_worker.py:2: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/folder_analysis_worker.py:3: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/gui/workers/folder_analysis_starter_worker.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/folder_analysis_starter_worker.py:2: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/gui/workers/dashboard_worker.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/dashboard_worker.py:2: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/gui/workers/chat_worker.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/chat_worker.py:2: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/gui/workers/api_worker.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/analysis_starter_worker.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/workers/analysis_starter_worker.py:2: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/core/smart_chunker.py:1: error: Skipping analyzing "nltk": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/core/smart_chunker.py:17: error: Incompatible default for argument "metadata" (default has type "None", argument has type "dict[Any, Any]")  [assignment]
src/core/smart_chunker.py:17: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
src/core/smart_chunker.py:17: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
src/core/llm_service.py:2: error: Skipping analyzing "ctransformers": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/core/llm_service.py:48: error: "None" not callable  [misc]
src/gui/dialogs/rubric_manager_dialog.py:1: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/dialogs/rubric_manager_dialog.py:1: note: Hint: "python3 -m pip install types-requests"
src/gui/dialogs/rubric_manager_dialog.py:45: error: Item "None" of "QPushButton | None" has no attribute "clicked"  [union-attr]
src/gui/dialogs/rubric_manager_dialog.py:46: error: Item "None" of "QPushButton | None" has no attribute "clicked"  [union-attr]
src/gui/dialogs/rubric_manager_dialog.py:47: error: Item "None" of "QPushButton | None" has no attribute "clicked"  [union-attr]
src/gui/dialogs/rubric_manager_dialog.py:48: error: Item "None" of "QPushButton | None" has no attribute "clicked"  [union-attr]
src/gui/dialogs/chat_dialog.py:24: error: Cannot assign to a method  [method-assign]
src/gui/dialogs/chat_dialog.py:24: error: Incompatible types in assignment (expression has type "QVBoxLayout", variable has type "Callable[[], QLayout | None]")  [assignment]
src/gui/dialogs/chat_dialog.py:28: error: "Callable[[], QLayout | None]" has no attribute "addWidget"  [attr-defined]
src/gui/dialogs/chat_dialog.py:37: error: "Callable[[], QLayout | None]" has no attribute "addLayout"  [attr-defined]
src/gui/dialogs/chat_dialog.py:40: error: "Callable[[], QLayout | None]" has no attribute "addWidget"  [attr-defined]
src/config.py:3: error: Library stubs not installed for "yaml"  [import-untyped]
src/config.py:6: error: No overload variant of "Field" matches argument types "str", "str"  [call-overload]
src/config.py:6: note: Possible overload variants:
src/config.py:6: note:     def Field(default, default: EllipsisType, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:6: note:     def [_T] Field(default, default: _T, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:6: note:     def [_T] Field(default_factory, *, default_factory: Callable[[], _T] | Callable[[dict[str, Any]], _T], alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:6: note:     def Field(alias, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:9: error: No overload variant of "Field" matches argument types "str", "str"  [call-overload]
src/config.py:9: note: Possible overload variants:
src/config.py:9: note:     def Field(default, default: EllipsisType, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:9: note:     def [_T] Field(default, default: _T, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:9: note:     def [_T] Field(default_factory, *, default_factory: Callable[[], _T] | Callable[[dict[str, Any]], _T], alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:9: note:     def Field(alias, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:10: error: No overload variant of "Field" matches argument types "str", "str"  [call-overload]
src/config.py:10: note: Possible overload variants:
src/config.py:10: note:     def Field(default, default: EllipsisType, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:10: note:     def [_T] Field(default, default: _T, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:10: note:     def [_T] Field(default_factory, *, default_factory: Callable[[], _T] | Callable[[dict[str, Any]], _T], alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:10: note:     def Field(alias, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:11: error: No overload variant of "Field" matches argument types "int", "str"  [call-overload]
src/config.py:11: note: Possible overload variants:
src/config.py:11: note:     def Field(default, default: EllipsisType, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:11: note:     def [_T] Field(default, default: _T, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:11: note:     def [_T] Field(default_factory, *, default_factory: Callable[[], _T] | Callable[[dict[str, Any]], _T], alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> _T
src/config.py:11: note:     def Field(alias, *, alias: str | None = ..., alias_priority: int | None = ..., validation_alias: str | AliasPath | AliasChoices | None = ..., serialization_alias: str | None = ..., title: str | None = ..., field_title_generator: Callable[[str, FieldInfo], str] | None = ..., description: str | None = ..., examples: list[Any] | None = ..., exclude: bool | None = ..., discriminator: str | Discriminator | None = ..., deprecated: deprecated | str | bool | None = ..., json_schema_extra: JsonDict | Callable[[JsonDict], None] | None = ..., frozen: bool | None = ..., validate_default: bool | None = ..., repr: bool = ..., init: bool | None = ..., init_var: bool | None = ..., kw_only: bool | None = ..., pattern: str | Pattern[str] | None = ..., strict: bool | None = ..., coerce_numbers_to_str: bool | None = ..., gt: SupportsGt | None = ..., ge: SupportsGe | None = ..., lt: SupportsLt | None = ..., le: SupportsLe | None = ..., multiple_of: float | None = ..., allow_inf_nan: bool | None = ..., max_digits: int | None = ..., decimal_places: int | None = ..., min_length: int | None = ..., max_length: int | None = ..., union_mode: Literal['smart', 'left_to_right'] = ..., fail_fast: bool | None = ...) -> Any
src/config.py:14: error: Missing named argument "url" for "DatabaseConfig"  [call-arg]
src/config.py:15: error: Missing named argument "secret_key" for "AuthConfig"  [call-arg]
src/config.py:15: error: Missing named argument "algorithm" for "AuthConfig"  [call-arg]
src/config.py:15: error: Missing named argument "access_token_expire_minutes" for "AuthConfig"  [call-arg]
src/crud.py:6: error: Library stubs not installed for "scipy.spatial.distance"  [import-untyped]
src/crud.py:6: note: Hint: "python3 -m pip install scipy-stubs"
src/crud.py:68: error: Incompatible types in assignment (expression has type "str", variable has type "Column[str]")  [assignment]
src/crud.py:75: error: Need type annotation for "summary" (hint: "summary: dict[<type>, <type>] = ...")  [var-annotated]
src/crud.py:78: error: "ColumnElement[Any]" has no attribute "__iter__" (not iterable)  [attr-defined]
src/rubric_router.py:5: error: Module "src.models" has no attribute "RubricCreate"  [attr-defined]
src/rubric_router.py:6: error: Module "src.database" has no attribute "DATABASE_PATH"  [attr-defined]
src/api/routers/health.py:17: error: No overload variant of "execute" of "Session" matches argument type "str"  [call-overload]
src/api/routers/health.py:17: note: Possible overload variants:
src/api/routers/health.py:17: note:     def [_T: Any] execute(self, statement: TypedReturnsRows[_T], params: Sequence[Mapping[str, Any]] | Mapping[str, Any] | None = ..., *, execution_options: _OrmKnownExecutionOptions | Mapping[str, Any] = ..., bind_arguments: dict[str, Any] | None = ..., _parent_execute_state: Any | None = ..., _add_event: Any | None = ...) -> Result[_T]
src/api/routers/health.py:17: note:     def execute(self, statement: UpdateBase, params: Sequence[Mapping[str, Any]] | Mapping[str, Any] | None = ..., *, execution_options: _OrmKnownExecutionOptions | Mapping[str, Any] = ..., bind_arguments: dict[str, Any] | None = ..., _parent_execute_state: Any | None = ..., _add_event: Any | None = ...) -> CursorResult[Any]
src/api/routers/health.py:17: note:     def execute(self, statement: Executable, params: Sequence[Mapping[str, Any]] | Mapping[str, Any] | None = ..., *, execution_options: _OrmKnownExecutionOptions | Mapping[str, Any] = ..., bind_arguments: dict[str, Any] | None = ..., _parent_execute_state: Any | None = ..., _add_event: Any | None = ...) -> Result[Any]
src/auth.py:6: error: Library stubs not installed for "jose"  [import-untyped]
src/auth.py:6: note: Hint: "python3 -m pip install types-python-jose"
src/auth.py:7: error: Library stubs not installed for "passlib.context"  [import-untyped]
src/auth.py:7: note: Hint: "python3 -m pip install types-passlib"
src/auth.py:57: error: Argument "username" to "get_user_by_username" has incompatible type "str | None"; expected "str"  [arg-type]
src/parsing.py:7: error: Cannot find implementation or library stub for module named "pytesseract"  [import-not-found]
src/parsing.py:9: error: Library stubs not installed for "pandas"  [import-untyped]
src/parsing.py:9: note: Hint: "python3 -m pip install pandas-stubs"
src/parsing.py:69: error: Incompatible types in assignment (expression has type "Image", variable has type "ImageFile")  [assignment]
src/parsing.py:90: error: Library stubs not installed for "yaml"  [import-untyped]
src/api/routers/admin.py:72: error: Incompatible types in assignment (expression has type "bool", variable has type "Column[bool]")  [assignment]
src/api/routers/admin.py:88: error: Incompatible types in assignment (expression has type "bool", variable has type "Column[bool]")  [assignment]
src/core/ner.py:27: error: No overload variant of "pipeline" matches argument types "str", "Any", "Any", "str"  [call-overload]
src/core/ner.py:27: note: Possible overload variants:
src/core/ner.py:27: note:     def pipeline(task: None, model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> Pipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['audio-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> AudioClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['automatic-speech-recognition'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> AutomaticSpeechRecognitionPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['depth-estimation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> DepthEstimationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['document-question-answering'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> DocumentQuestionAnsweringPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['feature-extraction'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> FeatureExtractionPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['fill-mask'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> FillMaskPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-feature-extraction'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageFeatureExtractionPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-segmentation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageSegmentationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-text-to-text'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageTextToTextPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-to-image'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageToImagePipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['image-to-text'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ImageToTextPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['keypoint-matching'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> KeypointMatchingPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['mask-generation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> MaskGenerationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['object-detection'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ObjectDetectionPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['question-answering'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> QuestionAnsweringPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['summarization'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> SummarizationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['table-question-answering'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TableQuestionAnsweringPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['text-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TextClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['text-generation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TextGenerationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['text-to-audio'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TextToAudioPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['text2text-generation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> Text2TextGenerationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['token-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TokenClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['translation'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> TranslationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['video-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> VideoClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['visual-question-answering'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> VisualQuestionAnsweringPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['zero-shot-audio-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ZeroShotAudioClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['zero-shot-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ZeroShotClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['zero-shot-image-classification'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ZeroShotImageClassificationPipeline
src/core/ner.py:27: note:     def pipeline(task: Literal['zero-shot-object-detection'], model: str | PreTrainedModel | TFPreTrainedModel | None = ..., config: str | PretrainedConfig | None = ..., tokenizer: str | PreTrainedTokenizer | PreTrainedTokenizerFast | None = ..., feature_extractor: str | Any | None = ..., image_processor: str | BaseImageProcessor | None = ..., processor: str | ProcessorMixin | None = ..., framework: str | None = ..., revision: str | None = ..., use_fast: bool = ..., token: str | bool | None = ..., device: int | str | device | None = ..., device_map: str | dict[str, int | str] | None = ..., dtype: str | dtype | None = ..., trust_remote_code: bool | None = ..., model_kwargs: dict[str, Any] | None = ..., pipeline_class: Any | None = ..., **kwargs: Any) -> ZeroShotObjectDetectionPipeline
src/core/compliance_analyzer.py:6: error: Cannot find implementation or library stub for module named "src.core.nlg_service"  [import-not-found]
src/guideline_service.py:14: error: Skipping analyzing "faiss": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/guideline_service.py:128: error: "None" has no attribute "add"  [attr-defined]
src/guideline_service.py:194: error: Incompatible default for argument "top_k" (default has type "None", argument has type "int")  [assignment]
src/guideline_service.py:194: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
src/guideline_service.py:194: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
src/core/hybrid_retriever.py:3: error: Skipping analyzing "rank_bm25": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/core/hybrid_retriever.py:55: error: Module has no attribute "get_rubrics"  [attr-defined]
src/core/document_analysis_service.py:3: error: Skipping analyzing "faiss": module is installed, but missing library stubs or py.typed marker  [import-untyped]
src/core/document_analysis_service.py:58: error: Incompatible default for argument "metadata_filter" (default has type "None", argument has type "dict[Any, Any]")  [assignment]
src/core/document_analysis_service.py:58: note: PEP 484 prohibits implicit Optional. Accordingly, mypy has changed its default to no_implicit_optional=True
src/core/document_analysis_service.py:58: note: Use https://github.com/hauntsaninja/no_implicit_optional to automatically upgrade your codebase
src/core/analysis_service.py:2: error: Library stubs not installed for "yaml"  [import-untyped]
src/core/analysis_service.py:2: note: Hint: "python3 -m pip install types-PyYAML"
src/core/analysis_service.py:2: note: (or run "mypy --install-types" to install all missing stub packages)
src/core/analysis_service.py:11: error: Cannot find implementation or library stub for module named "src.core.preprocessing_service"  [import-not-found]
src/core/analysis_service.py:11: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports
src/core/analysis_service.py:14: error: Cannot find implementation or library stub for module named "src.core.nlg_service"  [import-not-found]
src/gui/workers/ai_loader_worker.py:2: error: Library stubs not installed for "yaml"  [import-untyped]
src/gui/workers/ai_loader_worker.py:4: error: Module "PyQt6.QtCore" has no attribute "Signal"  [attr-defined]
src/api/routers/analysis.py:94: error: Argument 4 to "add_task" of "BackgroundTasks" has incompatible type "str | None"; expected "str"  [arg-type]
src/gui/main_window.py:2: error: Library stubs not installed for "requests"  [import-untyped]
src/gui/main_window.py:15: error: Cannot find implementation or library stub for module named "src.gui.dialogs.login_dialog"  [import-not-found]
src/gui/main_window.py:173: error: "QTextEdit" has no attribute "setOpenExternalLinks"  [attr-defined]
src/gui/main_window.py:174: error: "QTextEdit" has no attribute "anchorClicked"  [attr-defined]
src/gui/main_window.py:193: error: Item "None" of "QTextDocument | None" has no attribute "find"  [union-attr]
src/gui/main_window.py:196: error: Item "None" of "QTextDocument | None" has no attribute "find"  [union-attr]
src/gui/main_window.py:275: error: Cannot assign to a method  [method-assign]
src/gui/main_window.py:275: error: Incompatible types in assignment (expression has type "QThread", variable has type "Callable[[], QThread | None]")  [assignment]
src/gui/main_window.py:276: error: Missing positional arguments "data", "task_id" in call to "AnalysisWorker"  [call-arg]
src/gui/main_window.py:278: error: "Callable[[], QThread | None]" has no attribute "started"  [attr-defined]
src/gui/main_window.py:282: error: "Callable[[], QThread | None]" has no attribute "quit"  [attr-defined]
src/gui/main_window.py:284: error: "Callable[[], QThread | None]" has no attribute "finished"  [attr-defined]
src/gui/main_window.py:284: error: "Callable[[], QThread | None]" has no attribute "deleteLater"  [attr-defined]
src/gui/main_window.py:285: error: "Callable[[], QThread | None]" has no attribute "start"  [attr-defined]
src/api/main.py:21: error: Argument 2 to "add_exception_handler" of "Starlette" has incompatible type "Callable[[Request, RateLimitExceeded], Response]"; expected "Callable[[Request, Exception], Response | Awaitable[Response]] | Callable[[WebSocket, Exception], Awaitable[None]]"  [arg-type]
Found 93 errors in 36 files (checked 69 source files)
