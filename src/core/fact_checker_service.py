import logging
from transformers import pipeline, AutoTokenizer, AutoModelForSeq2SeqLM
from typing import Dict

logger = logging.getLogger(__name__)

class FactCheckerService:
    """
    A service to validate the findings of the main analysis LLM using a second,
    smaller, and more logical model. This provides a cross-check on the results.
    """
    def __init__(self, model_name: str):
        """
        Initializes the FactCheckerService by loading a sequence-to-sequence model.

        Args:
            model_name: The name of the model to use for fact-checking (e.g., 'google/flan-t5-small').
        """
        self.pipeline = None
        try:
            logger.info(f"Loading Fact-Checker model: {model_name}...")
            tokenizer = AutoTokenizer.from_pretrained(model_name)
            model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
            self.pipeline = pipeline("text2text-generation", model=model, tokenizer=tokenizer)
            logger.info(f"Successfully loaded Fact-Checker model: {model_name}")
        except Exception as e:
            logger.error(f"Failed to load Fact-Checker model {model_name}: {e}", exc_info=True)

    def is_finding_plausible(self, finding: Dict, rule: Dict) -> bool:
        """
<<<<<<< HEAD
        Checks if a given compliance finding is plausible based on the rule it violated.

        Args:
            finding: The compliance finding generated by the main LLM.
            rule: The compliance rule that was supposedly violated.

        Returns:
            True if the finding is plausible, False otherwise.
        """
        if not self.pipeline:
            logger.warning("Fact-Checker model not loaded. Skipping validation.")
            return True # Default to plausible if the checker is not available

        try:
            # Construct a simple, logical prompt for the fact-checker
            prompt = f"""
            Rule: {rule.get('name', '')} - {rule.get('content', '')}
            Problematic Text: "{finding.get('text', '')}"

            Question: Based on the rule, is it plausible that the problematic text represents a compliance issue? Answer only with 'Yes' or 'No'.

            Answer:
            """

            response = self.pipeline(prompt, max_length=10)[0]['generated_text']

            # Check the response from the fact-checker
            if 'yes' in response.lower():
                return True
            else:
                return False

        except Exception as e:
            logger.error(f"Error during fact-checking: {e}", exc_info=True)
            return True # Default to plausible in case of an error
||||||| c46cdd8
        logger.info(f"Fact-checking finding (placeholder implementation): {finding.get('text')}")
        return True
=======
        Checks if a given compliance finding is plausible based on the rule it violated.

        Args:
            finding: The compliance finding generated by the main LLM.
            rule: The compliance rule that was supposedly violated.

        Returns:
            True if the finding is plausible, False otherwise.
        """
        if not self.pipeline:
            logger.warning("Fact-Checker model not loaded. Skipping validation.")
            return True # Default to plausible if the checker is not available

        try:
            # Construct a simple, logical prompt for the fact-checker
            prompt = f"""
            Rule: {rule.get('name', '')} - {rule.get('content', '')}
            Problematic Text: "{finding.get('text', '')}"
            
            Question: Based on the rule, is it plausible that the problematic text represents a compliance issue? Answer only with 'Yes' or 'No'.
            
            Answer:
            """

            response = self.pipeline(prompt, max_length=10)[0]['generated_text']

            # Check the response from the fact-checker
            if 'yes' in response.lower():
                return True
            return False

        except Exception as e:
            logger.error(f"Error during fact-checking: {e}", exc_info=True)
            return True # Default to plausible in case of an error
>>>>>>> origin/main
